// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// SaveAccount mocks base method.
func (m *MockIRepository) SaveAccount(ctx context.Context, account *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockIRepositoryMockRecorder) SaveAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockIRepository)(nil).SaveAccount), ctx, account)
}

// SaveTransaction mocks base method.
func (m *MockIRepository) SaveTransaction(ctx context.Context, transaction *Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockIRepositoryMockRecorder) SaveTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockIRepository)(nil).SaveTransaction), ctx, transaction)
}

// MockIProducer is a mock of IProducer interface.
type MockIProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerMockRecorder
}

// MockIProducerMockRecorder is the mock recorder for MockIProducer.
type MockIProducerMockRecorder struct {
	mock *MockIProducer
}

// NewMockIProducer creates a new mock instance.
func NewMockIProducer(ctrl *gomock.Controller) *MockIProducer {
	mock := &MockIProducer{ctrl: ctrl}
	mock.recorder = &MockIProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducer) EXPECT() *MockIProducerMockRecorder {
	return m.recorder
}

// NewAccountEvent mocks base method.
func (m *MockIProducer) NewAccountEvent(ctx context.Context, account *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccountEvent", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewAccountEvent indicates an expected call of NewAccountEvent.
func (mr *MockIProducerMockRecorder) NewAccountEvent(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccountEvent", reflect.TypeOf((*MockIProducer)(nil).NewAccountEvent), ctx, account)
}

// NewTransactionEvent mocks base method.
func (m *MockIProducer) NewTransactionEvent(ctx context.Context, transaction *Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionEvent", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewTransactionEvent indicates an expected call of NewTransactionEvent.
func (mr *MockIProducerMockRecorder) NewTransactionEvent(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionEvent", reflect.TypeOf((*MockIProducer)(nil).NewTransactionEvent), ctx, transaction)
}

// MockIExternalServiceClient is a mock of IExternalServiceClient interface.
type MockIExternalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIExternalServiceClientMockRecorder
}

// MockIExternalServiceClientMockRecorder is the mock recorder for MockIExternalServiceClient.
type MockIExternalServiceClientMockRecorder struct {
	mock *MockIExternalServiceClient
}

// NewMockIExternalServiceClient creates a new mock instance.
func NewMockIExternalServiceClient(ctrl *gomock.Controller) *MockIExternalServiceClient {
	mock := &MockIExternalServiceClient{ctrl: ctrl}
	mock.recorder = &MockIExternalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExternalServiceClient) EXPECT() *MockIExternalServiceClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockIExternalServiceClient) CreateAccount(ctx context.Context, account *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockIExternalServiceClientMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIExternalServiceClient)(nil).CreateAccount), ctx, account)
}
